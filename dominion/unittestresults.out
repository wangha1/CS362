TESTING updateCoins():
Test no treasure card and 0 bonus for player 1 .
game.coins = 0, expected = 0
Test player 1 with 1 treasure card(s) and 0 bonus.
game.coins = 1, expected = 1
game.coins = 2, expected = 2
game.coins = 3, expected = 3
Test no treasure card and 1 bonus for player 1 .
game.coins = 1, expected = 1
Test player 1 with 1 treasure card(s) and 1 bonus.
game.coins = 2, expected = 2
game.coins = 3, expected = 3
game.coins = 4, expected = 4
Test no treasure card and 2 bonus for player 1 .
game.coins = 2, expected = 2
Test player 1 with 1 treasure card(s) and 2 bonus.
game.coins = 3, expected = 3
game.coins = 4, expected = 4
game.coins = 5, expected = 5
Test no treasure card and 3 bonus for player 1 .
game.coins = 3, expected = 3
Test player 1 with 1 treasure card(s) and 3 bonus.
game.coins = 4, expected = 4
game.coins = 5, expected = 5
game.coins = 6, expected = 6
Test no treasure card and 4 bonus for player 1 .
game.coins = 4, expected = 4
Test player 1 with 1 treasure card(s) and 4 bonus.
game.coins = 5, expected = 5
game.coins = 6, expected = 6
game.coins = 7, expected = 7
Test no treasure card and 5 bonus for player 1 .
game.coins = 5, expected = 5
Test player 1 with 1 treasure card(s) and 5 bonus.
game.coins = 6, expected = 6
game.coins = 7, expected = 7
game.coins = 8, expected = 8
Test no treasure card and 6 bonus for player 1 .
game.coins = 6, expected = 6
Test player 1 with 1 treasure card(s) and 6 bonus.
game.coins = 7, expected = 7
game.coins = 8, expected = 8
game.coins = 9, expected = 9
Test no treasure card and 7 bonus for player 1 .
game.coins = 7, expected = 7
Test player 1 with 1 treasure card(s) and 7 bonus.
game.coins = 8, expected = 8
game.coins = 9, expected = 9
game.coins = 10, expected = 10
Test no treasure card and 8 bonus for player 1 .
game.coins = 8, expected = 8
Test player 1 with 1 treasure card(s) and 8 bonus.
game.coins = 9, expected = 9
game.coins = 10, expected = 10
game.coins = 11, expected = 11
Test no treasure card and 9 bonus for player 1 .
game.coins = 9, expected = 9
Test player 1 with 1 treasure card(s) and 9 bonus.
game.coins = 10, expected = 10
game.coins = 11, expected = 11
game.coins = 12, expected = 12
Test no treasure card and 10 bonus for player 1 .
game.coins = 10, expected = 10
Test player 1 with 1 treasure card(s) and 10 bonus.
game.coins = 11, expected = 11
game.coins = 12, expected = 12
game.coins = 13, expected = 13
Test no treasure card and 0 bonus for player 1 .
game.coins = 0, expected = 0
Test player 1 with 2 treasure card(s) and 0 bonus.
game.coins = 2, expected = 2
game.coins = 4, expected = 4
game.coins = 6, expected = 6
Test no treasure card and 1 bonus for player 1 .
game.coins = 1, expected = 1
Test player 1 with 2 treasure card(s) and 1 bonus.
game.coins = 3, expected = 3
game.coins = 5, expected = 5
game.coins = 7, expected = 7
Test no treasure card and 2 bonus for player 1 .
game.coins = 2, expected = 2
Test player 1 with 2 treasure card(s) and 2 bonus.
game.coins = 4, expected = 4
game.coins = 6, expected = 6
game.coins = 8, expected = 8
Test no treasure card and 3 bonus for player 1 .
game.coins = 3, expected = 3
Test player 1 with 2 treasure card(s) and 3 bonus.
game.coins = 5, expected = 5
game.coins = 7, expected = 7
game.coins = 9, expected = 9
Test no treasure card and 4 bonus for player 1 .
game.coins = 4, expected = 4
Test player 1 with 2 treasure card(s) and 4 bonus.
game.coins = 6, expected = 6
game.coins = 8, expected = 8
game.coins = 10, expected = 10
Test no treasure card and 5 bonus for player 1 .
game.coins = 5, expected = 5
Test player 1 with 2 treasure card(s) and 5 bonus.
game.coins = 7, expected = 7
game.coins = 9, expected = 9
game.coins = 11, expected = 11
Test no treasure card and 6 bonus for player 1 .
game.coins = 6, expected = 6
Test player 1 with 2 treasure card(s) and 6 bonus.
game.coins = 8, expected = 8
game.coins = 10, expected = 10
game.coins = 12, expected = 12
Test no treasure card and 7 bonus for player 1 .
game.coins = 7, expected = 7
Test player 1 with 2 treasure card(s) and 7 bonus.
game.coins = 9, expected = 9
game.coins = 11, expected = 11
game.coins = 13, expected = 13
Test no treasure card and 8 bonus for player 1 .
game.coins = 8, expected = 8
Test player 1 with 2 treasure card(s) and 8 bonus.
game.coins = 10, expected = 10
game.coins = 12, expected = 12
game.coins = 14, expected = 14
Test no treasure card and 9 bonus for player 1 .
game.coins = 9, expected = 9
Test player 1 with 2 treasure card(s) and 9 bonus.
game.coins = 11, expected = 11
game.coins = 13, expected = 13
game.coins = 15, expected = 15
Test no treasure card and 10 bonus for player 1 .
game.coins = 10, expected = 10
Test player 1 with 2 treasure card(s) and 10 bonus.
game.coins = 12, expected = 12
game.coins = 14, expected = 14
game.coins = 16, expected = 16
Test no treasure card and 0 bonus for player 1 .
game.coins = 0, expected = 0
Test player 1 with 3 treasure card(s) and 0 bonus.
game.coins = 3, expected = 3
game.coins = 6, expected = 6
game.coins = 9, expected = 9
Test no treasure card and 1 bonus for player 1 .
game.coins = 1, expected = 1
Test player 1 with 3 treasure card(s) and 1 bonus.
game.coins = 4, expected = 4
game.coins = 7, expected = 7
game.coins = 10, expected = 10
Test no treasure card and 2 bonus for player 1 .
game.coins = 2, expected = 2
Test player 1 with 3 treasure card(s) and 2 bonus.
game.coins = 5, expected = 5
game.coins = 8, expected = 8
game.coins = 11, expected = 11
Test no treasure card and 3 bonus for player 1 .
game.coins = 3, expected = 3
Test player 1 with 3 treasure card(s) and 3 bonus.
game.coins = 6, expected = 6
game.coins = 9, expected = 9
game.coins = 12, expected = 12
Test no treasure card and 4 bonus for player 1 .
game.coins = 4, expected = 4
Test player 1 with 3 treasure card(s) and 4 bonus.
game.coins = 7, expected = 7
game.coins = 10, expected = 10
game.coins = 13, expected = 13
Test no treasure card and 5 bonus for player 1 .
game.coins = 5, expected = 5
Test player 1 with 3 treasure card(s) and 5 bonus.
game.coins = 8, expected = 8
game.coins = 11, expected = 11
game.coins = 14, expected = 14
Test no treasure card and 6 bonus for player 1 .
game.coins = 6, expected = 6
Test player 1 with 3 treasure card(s) and 6 bonus.
game.coins = 9, expected = 9
game.coins = 12, expected = 12
game.coins = 15, expected = 15
Test no treasure card and 7 bonus for player 1 .
game.coins = 7, expected = 7
Test player 1 with 3 treasure card(s) and 7 bonus.
game.coins = 10, expected = 10
game.coins = 13, expected = 13
game.coins = 16, expected = 16
Test no treasure card and 8 bonus for player 1 .
game.coins = 8, expected = 8
Test player 1 with 3 treasure card(s) and 8 bonus.
game.coins = 11, expected = 11
game.coins = 14, expected = 14
game.coins = 17, expected = 17
Test no treasure card and 9 bonus for player 1 .
game.coins = 9, expected = 9
Test player 1 with 3 treasure card(s) and 9 bonus.
game.coins = 12, expected = 12
game.coins = 15, expected = 15
game.coins = 18, expected = 18
Test no treasure card and 10 bonus for player 1 .
game.coins = 10, expected = 10
Test player 1 with 3 treasure card(s) and 10 bonus.
game.coins = 13, expected = 13
game.coins = 16, expected = 16
game.coins = 19, expected = 19
Test no treasure card and 0 bonus for player 1 .
game.coins = 0, expected = 0
Test player 1 with 4 treasure card(s) and 0 bonus.
game.coins = 4, expected = 4
game.coins = 8, expected = 8
game.coins = 12, expected = 12
Test no treasure card and 1 bonus for player 1 .
game.coins = 1, expected = 1
Test player 1 with 4 treasure card(s) and 1 bonus.
game.coins = 5, expected = 5
game.coins = 9, expected = 9
game.coins = 13, expected = 13
Test no treasure card and 2 bonus for player 1 .
game.coins = 2, expected = 2
Test player 1 with 4 treasure card(s) and 2 bonus.
game.coins = 6, expected = 6
game.coins = 10, expected = 10
game.coins = 14, expected = 14
Test no treasure card and 3 bonus for player 1 .
game.coins = 3, expected = 3
Test player 1 with 4 treasure card(s) and 3 bonus.
game.coins = 7, expected = 7
game.coins = 11, expected = 11
game.coins = 15, expected = 15
Test no treasure card and 4 bonus for player 1 .
game.coins = 4, expected = 4
Test player 1 with 4 treasure card(s) and 4 bonus.
game.coins = 8, expected = 8
game.coins = 12, expected = 12
game.coins = 16, expected = 16
Test no treasure card and 5 bonus for player 1 .
game.coins = 5, expected = 5
Test player 1 with 4 treasure card(s) and 5 bonus.
game.coins = 9, expected = 9
game.coins = 13, expected = 13
game.coins = 17, expected = 17
Test no treasure card and 6 bonus for player 1 .
game.coins = 6, expected = 6
Test player 1 with 4 treasure card(s) and 6 bonus.
game.coins = 10, expected = 10
game.coins = 14, expected = 14
game.coins = 18, expected = 18
Test no treasure card and 7 bonus for player 1 .
game.coins = 7, expected = 7
Test player 1 with 4 treasure card(s) and 7 bonus.
game.coins = 11, expected = 11
game.coins = 15, expected = 15
game.coins = 19, expected = 19
Test no treasure card and 8 bonus for player 1 .
game.coins = 8, expected = 8
Test player 1 with 4 treasure card(s) and 8 bonus.
game.coins = 12, expected = 12
game.coins = 16, expected = 16
game.coins = 20, expected = 20
Test no treasure card and 9 bonus for player 1 .
game.coins = 9, expected = 9
Test player 1 with 4 treasure card(s) and 9 bonus.
game.coins = 13, expected = 13
game.coins = 17, expected = 17
game.coins = 21, expected = 21
Test no treasure card and 10 bonus for player 1 .
game.coins = 10, expected = 10
Test player 1 with 4 treasure card(s) and 10 bonus.
game.coins = 14, expected = 14
game.coins = 18, expected = 18
game.coins = 22, expected = 22
Test no treasure card and 0 bonus for player 1 .
game.coins = 0, expected = 0
Test player 1 with 5 treasure card(s) and 0 bonus.
game.coins = 5, expected = 5
game.coins = 10, expected = 10
game.coins = 15, expected = 15
Test no treasure card and 1 bonus for player 1 .
game.coins = 1, expected = 1
Test player 1 with 5 treasure card(s) and 1 bonus.
game.coins = 6, expected = 6
game.coins = 11, expected = 11
game.coins = 16, expected = 16
Test no treasure card and 2 bonus for player 1 .
game.coins = 2, expected = 2
Test player 1 with 5 treasure card(s) and 2 bonus.
game.coins = 7, expected = 7
game.coins = 12, expected = 12
game.coins = 17, expected = 17
Test no treasure card and 3 bonus for player 1 .
game.coins = 3, expected = 3
Test player 1 with 5 treasure card(s) and 3 bonus.
game.coins = 8, expected = 8
game.coins = 13, expected = 13
game.coins = 18, expected = 18
Test no treasure card and 4 bonus for player 1 .
game.coins = 4, expected = 4
Test player 1 with 5 treasure card(s) and 4 bonus.
game.coins = 9, expected = 9
game.coins = 14, expected = 14
game.coins = 19, expected = 19
Test no treasure card and 5 bonus for player 1 .
game.coins = 5, expected = 5
Test player 1 with 5 treasure card(s) and 5 bonus.
game.coins = 10, expected = 10
game.coins = 15, expected = 15
game.coins = 20, expected = 20
Test no treasure card and 6 bonus for player 1 .
game.coins = 6, expected = 6
Test player 1 with 5 treasure card(s) and 6 bonus.
game.coins = 11, expected = 11
game.coins = 16, expected = 16
game.coins = 21, expected = 21
Test no treasure card and 7 bonus for player 1 .
game.coins = 7, expected = 7
Test player 1 with 5 treasure card(s) and 7 bonus.
game.coins = 12, expected = 12
game.coins = 17, expected = 17
game.coins = 22, expected = 22
Test no treasure card and 8 bonus for player 1 .
game.coins = 8, expected = 8
Test player 1 with 5 treasure card(s) and 8 bonus.
game.coins = 13, expected = 13
game.coins = 18, expected = 18
game.coins = 23, expected = 23
Test no treasure card and 9 bonus for player 1 .
game.coins = 9, expected = 9
Test player 1 with 5 treasure card(s) and 9 bonus.
game.coins = 14, expected = 14
game.coins = 19, expected = 19
game.coins = 24, expected = 24
Test no treasure card and 10 bonus for player 1 .
game.coins = 10, expected = 10
Test player 1 with 5 treasure card(s) and 10 bonus.
game.coins = 15, expected = 15
game.coins = 20, expected = 20
game.coins = 25, expected = 25
Test no treasure card and 0 bonus for player 2 .
game.coins = 0, expected = 0
Test player 2 with 1 treasure card(s) and 0 bonus.
game.coins = 1, expected = 1
game.coins = 2, expected = 2
game.coins = 3, expected = 3
Test no treasure card and 1 bonus for player 2 .
game.coins = 1, expected = 1
Test player 2 with 1 treasure card(s) and 1 bonus.
game.coins = 2, expected = 2
game.coins = 3, expected = 3
game.coins = 4, expected = 4
Test no treasure card and 2 bonus for player 2 .
game.coins = 2, expected = 2
Test player 2 with 1 treasure card(s) and 2 bonus.
game.coins = 3, expected = 3
game.coins = 4, expected = 4
game.coins = 5, expected = 5
Test no treasure card and 3 bonus for player 2 .
game.coins = 3, expected = 3
Test player 2 with 1 treasure card(s) and 3 bonus.
game.coins = 4, expected = 4
game.coins = 5, expected = 5
game.coins = 6, expected = 6
Test no treasure card and 4 bonus for player 2 .
game.coins = 4, expected = 4
Test player 2 with 1 treasure card(s) and 4 bonus.
game.coins = 5, expected = 5
game.coins = 6, expected = 6
game.coins = 7, expected = 7
Test no treasure card and 5 bonus for player 2 .
game.coins = 5, expected = 5
Test player 2 with 1 treasure card(s) and 5 bonus.
game.coins = 6, expected = 6
game.coins = 7, expected = 7
game.coins = 8, expected = 8
Test no treasure card and 6 bonus for player 2 .
game.coins = 6, expected = 6
Test player 2 with 1 treasure card(s) and 6 bonus.
game.coins = 7, expected = 7
game.coins = 8, expected = 8
game.coins = 9, expected = 9
Test no treasure card and 7 bonus for player 2 .
game.coins = 7, expected = 7
Test player 2 with 1 treasure card(s) and 7 bonus.
game.coins = 8, expected = 8
game.coins = 9, expected = 9
game.coins = 10, expected = 10
Test no treasure card and 8 bonus for player 2 .
game.coins = 8, expected = 8
Test player 2 with 1 treasure card(s) and 8 bonus.
game.coins = 9, expected = 9
game.coins = 10, expected = 10
game.coins = 11, expected = 11
Test no treasure card and 9 bonus for player 2 .
game.coins = 9, expected = 9
Test player 2 with 1 treasure card(s) and 9 bonus.
game.coins = 10, expected = 10
game.coins = 11, expected = 11
game.coins = 12, expected = 12
Test no treasure card and 10 bonus for player 2 .
game.coins = 10, expected = 10
Test player 2 with 1 treasure card(s) and 10 bonus.
game.coins = 11, expected = 11
game.coins = 12, expected = 12
game.coins = 13, expected = 13
Test no treasure card and 0 bonus for player 2 .
game.coins = 0, expected = 0
Test player 2 with 2 treasure card(s) and 0 bonus.
game.coins = 2, expected = 2
game.coins = 4, expected = 4
game.coins = 6, expected = 6
Test no treasure card and 1 bonus for player 2 .
game.coins = 1, expected = 1
Test player 2 with 2 treasure card(s) and 1 bonus.
game.coins = 3, expected = 3
game.coins = 5, expected = 5
game.coins = 7, expected = 7
Test no treasure card and 2 bonus for player 2 .
game.coins = 2, expected = 2
Test player 2 with 2 treasure card(s) and 2 bonus.
game.coins = 4, expected = 4
game.coins = 6, expected = 6
game.coins = 8, expected = 8
Test no treasure card and 3 bonus for player 2 .
game.coins = 3, expected = 3
Test player 2 with 2 treasure card(s) and 3 bonus.
game.coins = 5, expected = 5
game.coins = 7, expected = 7
game.coins = 9, expected = 9
Test no treasure card and 4 bonus for player 2 .
game.coins = 4, expected = 4
Test player 2 with 2 treasure card(s) and 4 bonus.
game.coins = 6, expected = 6
game.coins = 8, expected = 8
game.coins = 10, expected = 10
Test no treasure card and 5 bonus for player 2 .
game.coins = 5, expected = 5
Test player 2 with 2 treasure card(s) and 5 bonus.
game.coins = 7, expected = 7
game.coins = 9, expected = 9
game.coins = 11, expected = 11
Test no treasure card and 6 bonus for player 2 .
game.coins = 6, expected = 6
Test player 2 with 2 treasure card(s) and 6 bonus.
game.coins = 8, expected = 8
game.coins = 10, expected = 10
game.coins = 12, expected = 12
Test no treasure card and 7 bonus for player 2 .
game.coins = 7, expected = 7
Test player 2 with 2 treasure card(s) and 7 bonus.
game.coins = 9, expected = 9
game.coins = 11, expected = 11
game.coins = 13, expected = 13
Test no treasure card and 8 bonus for player 2 .
game.coins = 8, expected = 8
Test player 2 with 2 treasure card(s) and 8 bonus.
game.coins = 10, expected = 10
game.coins = 12, expected = 12
game.coins = 14, expected = 14
Test no treasure card and 9 bonus for player 2 .
game.coins = 9, expected = 9
Test player 2 with 2 treasure card(s) and 9 bonus.
game.coins = 11, expected = 11
game.coins = 13, expected = 13
game.coins = 15, expected = 15
Test no treasure card and 10 bonus for player 2 .
game.coins = 10, expected = 10
Test player 2 with 2 treasure card(s) and 10 bonus.
game.coins = 12, expected = 12
game.coins = 14, expected = 14
game.coins = 16, expected = 16
Test no treasure card and 0 bonus for player 2 .
game.coins = 0, expected = 0
Test player 2 with 3 treasure card(s) and 0 bonus.
game.coins = 3, expected = 3
game.coins = 6, expected = 6
game.coins = 9, expected = 9
Test no treasure card and 1 bonus for player 2 .
game.coins = 1, expected = 1
Test player 2 with 3 treasure card(s) and 1 bonus.
game.coins = 4, expected = 4
game.coins = 7, expected = 7
game.coins = 10, expected = 10
Test no treasure card and 2 bonus for player 2 .
game.coins = 2, expected = 2
Test player 2 with 3 treasure card(s) and 2 bonus.
game.coins = 5, expected = 5
game.coins = 8, expected = 8
game.coins = 11, expected = 11
Test no treasure card and 3 bonus for player 2 .
game.coins = 3, expected = 3
Test player 2 with 3 treasure card(s) and 3 bonus.
game.coins = 6, expected = 6
game.coins = 9, expected = 9
game.coins = 12, expected = 12
Test no treasure card and 4 bonus for player 2 .
game.coins = 4, expected = 4
Test player 2 with 3 treasure card(s) and 4 bonus.
game.coins = 7, expected = 7
game.coins = 10, expected = 10
game.coins = 13, expected = 13
Test no treasure card and 5 bonus for player 2 .
game.coins = 5, expected = 5
Test player 2 with 3 treasure card(s) and 5 bonus.
game.coins = 8, expected = 8
game.coins = 11, expected = 11
game.coins = 14, expected = 14
Test no treasure card and 6 bonus for player 2 .
game.coins = 6, expected = 6
Test player 2 with 3 treasure card(s) and 6 bonus.
game.coins = 9, expected = 9
game.coins = 12, expected = 12
game.coins = 15, expected = 15
Test no treasure card and 7 bonus for player 2 .
game.coins = 7, expected = 7
Test player 2 with 3 treasure card(s) and 7 bonus.
game.coins = 10, expected = 10
game.coins = 13, expected = 13
game.coins = 16, expected = 16
Test no treasure card and 8 bonus for player 2 .
game.coins = 8, expected = 8
Test player 2 with 3 treasure card(s) and 8 bonus.
game.coins = 11, expected = 11
game.coins = 14, expected = 14
game.coins = 17, expected = 17
Test no treasure card and 9 bonus for player 2 .
game.coins = 9, expected = 9
Test player 2 with 3 treasure card(s) and 9 bonus.
game.coins = 12, expected = 12
game.coins = 15, expected = 15
game.coins = 18, expected = 18
Test no treasure card and 10 bonus for player 2 .
game.coins = 10, expected = 10
Test player 2 with 3 treasure card(s) and 10 bonus.
game.coins = 13, expected = 13
game.coins = 16, expected = 16
game.coins = 19, expected = 19
Test no treasure card and 0 bonus for player 2 .
game.coins = 0, expected = 0
Test player 2 with 4 treasure card(s) and 0 bonus.
game.coins = 4, expected = 4
game.coins = 8, expected = 8
game.coins = 12, expected = 12
Test no treasure card and 1 bonus for player 2 .
game.coins = 1, expected = 1
Test player 2 with 4 treasure card(s) and 1 bonus.
game.coins = 5, expected = 5
game.coins = 9, expected = 9
game.coins = 13, expected = 13
Test no treasure card and 2 bonus for player 2 .
game.coins = 2, expected = 2
Test player 2 with 4 treasure card(s) and 2 bonus.
game.coins = 6, expected = 6
game.coins = 10, expected = 10
game.coins = 14, expected = 14
Test no treasure card and 3 bonus for player 2 .
game.coins = 3, expected = 3
Test player 2 with 4 treasure card(s) and 3 bonus.
game.coins = 7, expected = 7
game.coins = 11, expected = 11
game.coins = 15, expected = 15
Test no treasure card and 4 bonus for player 2 .
game.coins = 4, expected = 4
Test player 2 with 4 treasure card(s) and 4 bonus.
game.coins = 8, expected = 8
game.coins = 12, expected = 12
game.coins = 16, expected = 16
Test no treasure card and 5 bonus for player 2 .
game.coins = 5, expected = 5
Test player 2 with 4 treasure card(s) and 5 bonus.
game.coins = 9, expected = 9
game.coins = 13, expected = 13
game.coins = 17, expected = 17
Test no treasure card and 6 bonus for player 2 .
game.coins = 6, expected = 6
Test player 2 with 4 treasure card(s) and 6 bonus.
game.coins = 10, expected = 10
game.coins = 14, expected = 14
game.coins = 18, expected = 18
Test no treasure card and 7 bonus for player 2 .
game.coins = 7, expected = 7
Test player 2 with 4 treasure card(s) and 7 bonus.
game.coins = 11, expected = 11
game.coins = 15, expected = 15
game.coins = 19, expected = 19
Test no treasure card and 8 bonus for player 2 .
game.coins = 8, expected = 8
Test player 2 with 4 treasure card(s) and 8 bonus.
game.coins = 12, expected = 12
game.coins = 16, expected = 16
game.coins = 20, expected = 20
Test no treasure card and 9 bonus for player 2 .
game.coins = 9, expected = 9
Test player 2 with 4 treasure card(s) and 9 bonus.
game.coins = 13, expected = 13
game.coins = 17, expected = 17
game.coins = 21, expected = 21
Test no treasure card and 10 bonus for player 2 .
game.coins = 10, expected = 10
Test player 2 with 4 treasure card(s) and 10 bonus.
game.coins = 14, expected = 14
game.coins = 18, expected = 18
game.coins = 22, expected = 22
Test no treasure card and 0 bonus for player 2 .
game.coins = 0, expected = 0
Test player 2 with 5 treasure card(s) and 0 bonus.
game.coins = 5, expected = 5
game.coins = 10, expected = 10
game.coins = 15, expected = 15
Test no treasure card and 1 bonus for player 2 .
game.coins = 1, expected = 1
Test player 2 with 5 treasure card(s) and 1 bonus.
game.coins = 6, expected = 6
game.coins = 11, expected = 11
game.coins = 16, expected = 16
Test no treasure card and 2 bonus for player 2 .
game.coins = 2, expected = 2
Test player 2 with 5 treasure card(s) and 2 bonus.
game.coins = 7, expected = 7
game.coins = 12, expected = 12
game.coins = 17, expected = 17
Test no treasure card and 3 bonus for player 2 .
game.coins = 3, expected = 3
Test player 2 with 5 treasure card(s) and 3 bonus.
game.coins = 8, expected = 8
game.coins = 13, expected = 13
game.coins = 18, expected = 18
Test no treasure card and 4 bonus for player 2 .
game.coins = 4, expected = 4
Test player 2 with 5 treasure card(s) and 4 bonus.
game.coins = 9, expected = 9
game.coins = 14, expected = 14
game.coins = 19, expected = 19
Test no treasure card and 5 bonus for player 2 .
game.coins = 5, expected = 5
Test player 2 with 5 treasure card(s) and 5 bonus.
game.coins = 10, expected = 10
game.coins = 15, expected = 15
game.coins = 20, expected = 20
Test no treasure card and 6 bonus for player 2 .
game.coins = 6, expected = 6
Test player 2 with 5 treasure card(s) and 6 bonus.
game.coins = 11, expected = 11
game.coins = 16, expected = 16
game.coins = 21, expected = 21
Test no treasure card and 7 bonus for player 2 .
game.coins = 7, expected = 7
Test player 2 with 5 treasure card(s) and 7 bonus.
game.coins = 12, expected = 12
game.coins = 17, expected = 17
game.coins = 22, expected = 22
Test no treasure card and 8 bonus for player 2 .
game.coins = 8, expected = 8
Test player 2 with 5 treasure card(s) and 8 bonus.
game.coins = 13, expected = 13
game.coins = 18, expected = 18
game.coins = 23, expected = 23
Test no treasure card and 9 bonus for player 2 .
game.coins = 9, expected = 9
Test player 2 with 5 treasure card(s) and 9 bonus.
game.coins = 14, expected = 14
game.coins = 19, expected = 19
game.coins = 24, expected = 24
Test no treasure card and 10 bonus for player 2 .
game.coins = 10, expected = 10
Test player 2 with 5 treasure card(s) and 10 bonus.
game.coins = 15, expected = 15
game.coins = 20, expected = 20
game.coins = 25, expected = 25
Test no treasure card and 0 bonus for player 3 .
game.coins = 0, expected = 0
Test player 3 with 1 treasure card(s) and 0 bonus.
game.coins = 1, expected = 1
game.coins = 2, expected = 2
game.coins = 3, expected = 3
Test no treasure card and 1 bonus for player 3 .
game.coins = 1, expected = 1
Test player 3 with 1 treasure card(s) and 1 bonus.
game.coins = 2, expected = 2
game.coins = 3, expected = 3
game.coins = 4, expected = 4
Test no treasure card and 2 bonus for player 3 .
game.coins = 2, expected = 2
Test player 3 with 1 treasure card(s) and 2 bonus.
game.coins = 3, expected = 3
game.coins = 4, expected = 4
game.coins = 5, expected = 5
Test no treasure card and 3 bonus for player 3 .
game.coins = 3, expected = 3
Test player 3 with 1 treasure card(s) and 3 bonus.
game.coins = 4, expected = 4
game.coins = 5, expected = 5
game.coins = 6, expected = 6
Test no treasure card and 4 bonus for player 3 .
game.coins = 4, expected = 4
Test player 3 with 1 treasure card(s) and 4 bonus.
game.coins = 5, expected = 5
game.coins = 6, expected = 6
game.coins = 7, expected = 7
Test no treasure card and 5 bonus for player 3 .
game.coins = 5, expected = 5
Test player 3 with 1 treasure card(s) and 5 bonus.
game.coins = 6, expected = 6
game.coins = 7, expected = 7
game.coins = 8, expected = 8
Test no treasure card and 6 bonus for player 3 .
game.coins = 6, expected = 6
Test player 3 with 1 treasure card(s) and 6 bonus.
game.coins = 7, expected = 7
game.coins = 8, expected = 8
game.coins = 9, expected = 9
Test no treasure card and 7 bonus for player 3 .
game.coins = 7, expected = 7
Test player 3 with 1 treasure card(s) and 7 bonus.
game.coins = 8, expected = 8
game.coins = 9, expected = 9
game.coins = 10, expected = 10
Test no treasure card and 8 bonus for player 3 .
game.coins = 8, expected = 8
Test player 3 with 1 treasure card(s) and 8 bonus.
game.coins = 9, expected = 9
game.coins = 10, expected = 10
game.coins = 11, expected = 11
Test no treasure card and 9 bonus for player 3 .
game.coins = 9, expected = 9
Test player 3 with 1 treasure card(s) and 9 bonus.
game.coins = 10, expected = 10
game.coins = 11, expected = 11
game.coins = 12, expected = 12
Test no treasure card and 10 bonus for player 3 .
game.coins = 10, expected = 10
Test player 3 with 1 treasure card(s) and 10 bonus.
game.coins = 11, expected = 11
game.coins = 12, expected = 12
game.coins = 13, expected = 13
Test no treasure card and 0 bonus for player 3 .
game.coins = 0, expected = 0
Test player 3 with 2 treasure card(s) and 0 bonus.
game.coins = 2, expected = 2
game.coins = 4, expected = 4
game.coins = 6, expected = 6
Test no treasure card and 1 bonus for player 3 .
game.coins = 1, expected = 1
Test player 3 with 2 treasure card(s) and 1 bonus.
game.coins = 3, expected = 3
game.coins = 5, expected = 5
game.coins = 7, expected = 7
Test no treasure card and 2 bonus for player 3 .
game.coins = 2, expected = 2
Test player 3 with 2 treasure card(s) and 2 bonus.
game.coins = 4, expected = 4
game.coins = 6, expected = 6
game.coins = 8, expected = 8
Test no treasure card and 3 bonus for player 3 .
game.coins = 3, expected = 3
Test player 3 with 2 treasure card(s) and 3 bonus.
game.coins = 5, expected = 5
game.coins = 7, expected = 7
game.coins = 9, expected = 9
Test no treasure card and 4 bonus for player 3 .
game.coins = 4, expected = 4
Test player 3 with 2 treasure card(s) and 4 bonus.
game.coins = 6, expected = 6
game.coins = 8, expected = 8
game.coins = 10, expected = 10
Test no treasure card and 5 bonus for player 3 .
game.coins = 5, expected = 5
Test player 3 with 2 treasure card(s) and 5 bonus.
game.coins = 7, expected = 7
game.coins = 9, expected = 9
game.coins = 11, expected = 11
Test no treasure card and 6 bonus for player 3 .
game.coins = 6, expected = 6
Test player 3 with 2 treasure card(s) and 6 bonus.
game.coins = 8, expected = 8
game.coins = 10, expected = 10
game.coins = 12, expected = 12
Test no treasure card and 7 bonus for player 3 .
game.coins = 7, expected = 7
Test player 3 with 2 treasure card(s) and 7 bonus.
game.coins = 9, expected = 9
game.coins = 11, expected = 11
game.coins = 13, expected = 13
Test no treasure card and 8 bonus for player 3 .
game.coins = 8, expected = 8
Test player 3 with 2 treasure card(s) and 8 bonus.
game.coins = 10, expected = 10
game.coins = 12, expected = 12
game.coins = 14, expected = 14
Test no treasure card and 9 bonus for player 3 .
game.coins = 9, expected = 9
Test player 3 with 2 treasure card(s) and 9 bonus.
game.coins = 11, expected = 11
game.coins = 13, expected = 13
game.coins = 15, expected = 15
Test no treasure card and 10 bonus for player 3 .
game.coins = 10, expected = 10
Test player 3 with 2 treasure card(s) and 10 bonus.
game.coins = 12, expected = 12
game.coins = 14, expected = 14
game.coins = 16, expected = 16
Test no treasure card and 0 bonus for player 3 .
game.coins = 0, expected = 0
Test player 3 with 3 treasure card(s) and 0 bonus.
game.coins = 3, expected = 3
game.coins = 6, expected = 6
game.coins = 9, expected = 9
Test no treasure card and 1 bonus for player 3 .
game.coins = 1, expected = 1
Test player 3 with 3 treasure card(s) and 1 bonus.
game.coins = 4, expected = 4
game.coins = 7, expected = 7
game.coins = 10, expected = 10
Test no treasure card and 2 bonus for player 3 .
game.coins = 2, expected = 2
Test player 3 with 3 treasure card(s) and 2 bonus.
game.coins = 5, expected = 5
game.coins = 8, expected = 8
game.coins = 11, expected = 11
Test no treasure card and 3 bonus for player 3 .
game.coins = 3, expected = 3
Test player 3 with 3 treasure card(s) and 3 bonus.
game.coins = 6, expected = 6
game.coins = 9, expected = 9
game.coins = 12, expected = 12
Test no treasure card and 4 bonus for player 3 .
game.coins = 4, expected = 4
Test player 3 with 3 treasure card(s) and 4 bonus.
game.coins = 7, expected = 7
game.coins = 10, expected = 10
game.coins = 13, expected = 13
Test no treasure card and 5 bonus for player 3 .
game.coins = 5, expected = 5
Test player 3 with 3 treasure card(s) and 5 bonus.
game.coins = 8, expected = 8
game.coins = 11, expected = 11
game.coins = 14, expected = 14
Test no treasure card and 6 bonus for player 3 .
game.coins = 6, expected = 6
Test player 3 with 3 treasure card(s) and 6 bonus.
game.coins = 9, expected = 9
game.coins = 12, expected = 12
game.coins = 15, expected = 15
Test no treasure card and 7 bonus for player 3 .
game.coins = 7, expected = 7
Test player 3 with 3 treasure card(s) and 7 bonus.
game.coins = 10, expected = 10
game.coins = 13, expected = 13
game.coins = 16, expected = 16
Test no treasure card and 8 bonus for player 3 .
game.coins = 8, expected = 8
Test player 3 with 3 treasure card(s) and 8 bonus.
game.coins = 11, expected = 11
game.coins = 14, expected = 14
game.coins = 17, expected = 17
Test no treasure card and 9 bonus for player 3 .
game.coins = 9, expected = 9
Test player 3 with 3 treasure card(s) and 9 bonus.
game.coins = 12, expected = 12
game.coins = 15, expected = 15
game.coins = 18, expected = 18
Test no treasure card and 10 bonus for player 3 .
game.coins = 10, expected = 10
Test player 3 with 3 treasure card(s) and 10 bonus.
game.coins = 13, expected = 13
game.coins = 16, expected = 16
game.coins = 19, expected = 19
Test no treasure card and 0 bonus for player 3 .
game.coins = 0, expected = 0
Test player 3 with 4 treasure card(s) and 0 bonus.
game.coins = 4, expected = 4
game.coins = 8, expected = 8
game.coins = 12, expected = 12
Test no treasure card and 1 bonus for player 3 .
game.coins = 1, expected = 1
Test player 3 with 4 treasure card(s) and 1 bonus.
game.coins = 5, expected = 5
game.coins = 9, expected = 9
game.coins = 13, expected = 13
Test no treasure card and 2 bonus for player 3 .
game.coins = 2, expected = 2
Test player 3 with 4 treasure card(s) and 2 bonus.
game.coins = 6, expected = 6
game.coins = 10, expected = 10
game.coins = 14, expected = 14
Test no treasure card and 3 bonus for player 3 .
game.coins = 3, expected = 3
Test player 3 with 4 treasure card(s) and 3 bonus.
game.coins = 7, expected = 7
game.coins = 11, expected = 11
game.coins = 15, expected = 15
Test no treasure card and 4 bonus for player 3 .
game.coins = 4, expected = 4
Test player 3 with 4 treasure card(s) and 4 bonus.
game.coins = 8, expected = 8
game.coins = 12, expected = 12
game.coins = 16, expected = 16
Test no treasure card and 5 bonus for player 3 .
game.coins = 5, expected = 5
Test player 3 with 4 treasure card(s) and 5 bonus.
game.coins = 9, expected = 9
game.coins = 13, expected = 13
game.coins = 17, expected = 17
Test no treasure card and 6 bonus for player 3 .
game.coins = 6, expected = 6
Test player 3 with 4 treasure card(s) and 6 bonus.
game.coins = 10, expected = 10
game.coins = 14, expected = 14
game.coins = 18, expected = 18
Test no treasure card and 7 bonus for player 3 .
game.coins = 7, expected = 7
Test player 3 with 4 treasure card(s) and 7 bonus.
game.coins = 11, expected = 11
game.coins = 15, expected = 15
game.coins = 19, expected = 19
Test no treasure card and 8 bonus for player 3 .
game.coins = 8, expected = 8
Test player 3 with 4 treasure card(s) and 8 bonus.
game.coins = 12, expected = 12
game.coins = 16, expected = 16
game.coins = 20, expected = 20
Test no treasure card and 9 bonus for player 3 .
game.coins = 9, expected = 9
Test player 3 with 4 treasure card(s) and 9 bonus.
game.coins = 13, expected = 13
game.coins = 17, expected = 17
game.coins = 21, expected = 21
Test no treasure card and 10 bonus for player 3 .
game.coins = 10, expected = 10
Test player 3 with 4 treasure card(s) and 10 bonus.
game.coins = 14, expected = 14
game.coins = 18, expected = 18
game.coins = 22, expected = 22
Test no treasure card and 0 bonus for player 3 .
game.coins = 0, expected = 0
Test player 3 with 5 treasure card(s) and 0 bonus.
game.coins = 5, expected = 5
game.coins = 10, expected = 10
game.coins = 15, expected = 15
Test no treasure card and 1 bonus for player 3 .
game.coins = 1, expected = 1
Test player 3 with 5 treasure card(s) and 1 bonus.
game.coins = 6, expected = 6
game.coins = 11, expected = 11
game.coins = 16, expected = 16
Test no treasure card and 2 bonus for player 3 .
game.coins = 2, expected = 2
Test player 3 with 5 treasure card(s) and 2 bonus.
game.coins = 7, expected = 7
game.coins = 12, expected = 12
game.coins = 17, expected = 17
Test no treasure card and 3 bonus for player 3 .
game.coins = 3, expected = 3
Test player 3 with 5 treasure card(s) and 3 bonus.
game.coins = 8, expected = 8
game.coins = 13, expected = 13
game.coins = 18, expected = 18
Test no treasure card and 4 bonus for player 3 .
game.coins = 4, expected = 4
Test player 3 with 5 treasure card(s) and 4 bonus.
game.coins = 9, expected = 9
game.coins = 14, expected = 14
game.coins = 19, expected = 19
Test no treasure card and 5 bonus for player 3 .
game.coins = 5, expected = 5
Test player 3 with 5 treasure card(s) and 5 bonus.
game.coins = 10, expected = 10
game.coins = 15, expected = 15
game.coins = 20, expected = 20
Test no treasure card and 6 bonus for player 3 .
game.coins = 6, expected = 6
Test player 3 with 5 treasure card(s) and 6 bonus.
game.coins = 11, expected = 11
game.coins = 16, expected = 16
game.coins = 21, expected = 21
Test no treasure card and 7 bonus for player 3 .
game.coins = 7, expected = 7
Test player 3 with 5 treasure card(s) and 7 bonus.
game.coins = 12, expected = 12
game.coins = 17, expected = 17
game.coins = 22, expected = 22
Test no treasure card and 8 bonus for player 3 .
game.coins = 8, expected = 8
Test player 3 with 5 treasure card(s) and 8 bonus.
game.coins = 13, expected = 13
game.coins = 18, expected = 18
game.coins = 23, expected = 23
Test no treasure card and 9 bonus for player 3 .
game.coins = 9, expected = 9
Test player 3 with 5 treasure card(s) and 9 bonus.
game.coins = 14, expected = 14
game.coins = 19, expected = 19
game.coins = 24, expected = 24
Test no treasure card and 10 bonus for player 3 .
game.coins = 10, expected = 10
Test player 3 with 5 treasure card(s) and 10 bonus.
game.coins = 15, expected = 15
game.coins = 20, expected = 20
game.coins = 25, expected = 25
All tests passed!
TESTING discardCard():
---------Test if the card is trashed for player 1, card position 0 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 1, card position 1 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 1, card position 0 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 1, card position 2 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 1, card position 1 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 1, card position 2 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 1, card position 0 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 1, card position 3 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 1, card position 1 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 1, card position 3 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 1, card position 2 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 1, card position 3 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 1, card position 0 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 1, card position 4 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 1, card position 1 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 1, card position 4 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 1, card position 2 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 1, card position 4 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 1, card position 3 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 1, card position 4 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 1, card position 0 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 1, card position 5 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 1, card position 1 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 1, card position 5 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 1, card position 2 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 1, card position 5 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 1, card position 3 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 1, card position 5 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 1, card position 4 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 1, card position 5 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 2, card position 0 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 2, card position 1 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 2, card position 0 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 2, card position 2 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 2, card position 1 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 2, card position 2 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 2, card position 0 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 2, card position 3 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 2, card position 1 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 2, card position 3 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 2, card position 2 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 2, card position 3 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 2, card position 0 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 2, card position 4 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 2, card position 1 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 2, card position 4 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 2, card position 2 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 2, card position 4 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 2, card position 3 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 2, card position 4 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 2, card position 0 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 2, card position 5 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 2, card position 1 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 2, card position 5 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 2, card position 2 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 2, card position 5 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 2, card position 3 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 2, card position 5 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 2, card position 4 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 2, card position 5 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 3, card position 0 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 3, card position 1 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 3, card position 0 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 3, card position 2 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 3, card position 1 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 3, card position 2 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 3, card position 0 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 3, card position 3 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 3, card position 1 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 3, card position 3 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 3, card position 2 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 3, card position 3 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 3, card position 0 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 3, card position 4 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 3, card position 1 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 3, card position 4 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 3, card position 2 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 3, card position 4 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 3, card position 3 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 3, card position 4 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 3, card position 0 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 3, card position 5 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 3, card position 1 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 3, card position 5 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 3, card position 2 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 3, card position 5 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 3, card position 3 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 3, card position 5 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is trashed for player 3, card position 4 .------------
check if the last card is set to -1...PASSED
check if the card is NOT in played pile...PASSED
check the number of cards in hand is reduced...PASSED
---------Test if the card is NOT trashed for player 3, card position 5 .---------
check if the last card is set to -1...PASSED
check if the card is in played pile...PASSED
check the number of cards in hand is reduced...PASSED
All tests passed!
TESTING getCost():
---------Test for player 1 .---------
check if the costs are the same...
cost = 6, expected = 6...PASSED
---------Test for player 1 .---------
check if the costs are the same...
cost = 5, expected = 5...PASSED
---------Test for player 1 .---------
check if the costs are the same...
cost = 4, expected = 4...PASSED
---------Test for player 1 .---------
check if the costs are the same...
cost = 4, expected = 4...PASSED
---------Test for player 1 .---------
check if the costs are the same...
cost = 5, expected = 5...PASSED
---------Test for player 1 .---------
check if the costs are the same...
cost = 4, expected = 4...PASSED
---------Test for player 1 .---------
check if the costs are the same...
cost = 4, expected = 4...PASSED
---------Test for player 1 .---------
check if the costs are the same...
cost = 3, expected = 3...PASSED
---------Test for player 1 .---------
check if the costs are the same...
cost = 4, expected = 4...PASSED
---------Test for player 1 .---------
check if the costs are the same...
cost = 3, expected = 3...PASSED
---------Test for player 2 .---------
check if the costs are the same...
cost = 6, expected = 6...PASSED
---------Test for player 2 .---------
check if the costs are the same...
cost = 5, expected = 5...PASSED
---------Test for player 2 .---------
check if the costs are the same...
cost = 4, expected = 4...PASSED
---------Test for player 2 .---------
check if the costs are the same...
cost = 4, expected = 4...PASSED
---------Test for player 2 .---------
check if the costs are the same...
cost = 5, expected = 5...PASSED
---------Test for player 2 .---------
check if the costs are the same...
cost = 4, expected = 4...PASSED
---------Test for player 2 .---------
check if the costs are the same...
cost = 4, expected = 4...PASSED
---------Test for player 2 .---------
check if the costs are the same...
cost = 3, expected = 3...PASSED
---------Test for player 2 .---------
check if the costs are the same...
cost = 4, expected = 4...PASSED
---------Test for player 2 .---------
check if the costs are the same...
cost = 3, expected = 3...PASSED
---------Test for player 3 .---------
check if the costs are the same...
cost = 6, expected = 6...PASSED
---------Test for player 3 .---------
check if the costs are the same...
cost = 5, expected = 5...PASSED
---------Test for player 3 .---------
check if the costs are the same...
cost = 4, expected = 4...PASSED
---------Test for player 3 .---------
check if the costs are the same...
cost = 4, expected = 4...PASSED
---------Test for player 3 .---------
check if the costs are the same...
cost = 5, expected = 5...PASSED
---------Test for player 3 .---------
check if the costs are the same...
cost = 4, expected = 4...PASSED
---------Test for player 3 .---------
check if the costs are the same...
cost = 4, expected = 4...PASSED
---------Test for player 3 .---------
check if the costs are the same...
cost = 3, expected = 3...PASSED
---------Test for player 3 .---------
check if the costs are the same...
cost = 4, expected = 4...PASSED
---------Test for player 3 .---------
check if the costs are the same...
cost = 3, expected = 3...PASSED
All tests passed!
TESTING isGameOver():
--!!!!!!!
---------Test for i = 0. Expected result : game is over------------
check if the game is over...
...PASSED
--!!!!!!!
---------Test for i = 1. Expected result : game is NOT over---------
check if the game is over...
...PASSED
--!!!!!!!
---------Test for i = 2. Expected result : game is NOT over---------
check if the game is over...
...PASSED
--!!!!!!!
---------Test for i = 3. Expected result : game is over------------
check if the game is over...
...PASSED
All tests passed!
----------------- Testing Card: smithy ----------------
checking for +3 cards...
hand count = 8, expected = 7
deck count = 1, expected = 2
...NOT PASSED

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: village ----------------
Checking for +1 cards...
Hand count = 5, expected = 5
Deck count = 4, expected = 4
...PASSED
Checking for +2 actions...
Actions = 1, expected = 3
...NOT PASSED

 >>>>> SUCCESS: Testing complete village <<<<<

----------------- Testing Card: council_room ----------------
Checking for +4 cards...
Hand count = 9, expected = 8
Deck count = 1, expected = 1
...NOT PASSED
Checking for +1 buy...
Buys = 1, expected = 2
...NOT PASSED

 >>>>> SUCCESS: Testing complete council_room <<<<<

----------------- Testing Card: adventurer ----------------
Checking for adventurer cards...
Hand count = 4, expected = 5
Hand count = 4, expected = 6
...NOT PASSED

 >>>>> SUCCESS: Testing complete adventurer <<<<<

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 9730 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
     9730:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
     9730:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
     3475:   12:    return -1;
     6255:   13:  return 0;
     9730:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 233 returned 100% blocks executed 93%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      233:   44:  SelectStream(1);
      233:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      466:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      233:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     5126:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
    51260:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
    44270:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    23300:   65:        }
     2330:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      233:   73:  if (numPlayers == 2)
branch  0 taken 2%
branch  1 taken 98%
        -:   74:    {
        4:   75:      state->supplyCount[curse] = 10;
        4:   76:    }
      229:   77:  else if (numPlayers == 3)
branch  0 taken 100%
branch  1 taken 0%
        -:   78:    {
      229:   79:      state->supplyCount[curse] = 20;
      229:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      233:   87:  if (numPlayers == 2)
branch  0 taken 2%
branch  1 taken 98%
        -:   88:    {
        4:   89:      state->supplyCount[estate] = 8;
        4:   90:      state->supplyCount[duchy] = 8;
        4:   91:      state->supplyCount[province] = 8;
        4:   92:    }
        -:   93:  else
        -:   94:    {
      229:   95:      state->supplyCount[estate] = 12;
      229:   96:      state->supplyCount[duchy] = 12;
      229:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      233:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      233:  102:  state->supplyCount[silver] = 40;
      233:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     9786:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
    76890:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
    36115:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     4431:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  114:		{
      458:  115:		  if (numPlayers == 2){ 
branch  0 taken 0%
branch  1 taken 100%
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
      458:  118:		  else{ state->supplyCount[i] = 12; }
      458:  119:		}
        -:  120:	      else
        -:  121:		{
     1872:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     2330:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    33785:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    33785:  130:	}
        -:  131:
     4660:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1856:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  139:    {
      695:  140:      state->deckCount[i] = 0;
     5560:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
     2085:  143:	  state->deck[i][j] = estate;
     2085:  144:	  state->deckCount[i]++;
     2085:  145:	}
    11120:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
     4865:  148:	  state->deck[i][j] = copper;
     4865:  149:	  state->deckCount[i]++;		
     4865:  150:	}
      695:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1856:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  155:    {
      695:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
      695:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1856:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      695:  166:      state->handCount[i] = 0;
      695:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
      695:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    13048:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
     6291:  178:      state->embargoTokens[i] = 0;
     6291:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      233:  182:  state->outpostPlayed = 0;
      233:  183:  state->phase = 0;
      233:  184:  state->numActions = 1;
      233:  185:  state->numBuys = 1;
      233:  186:  state->playedCardCount = 0;
      233:  187:  state->whoseTurn = 0;
      233:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     2796:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
     1165:  193:    drawCard(state->whoseTurn, state);
     1165:  194:  }
        -:  195:
      233:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      233:  198:  return 0;
      233:  199:}
        -:  200:
function shuffle called 703 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      703:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      703:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1%
branch  1 taken 99%
        8:  210:    return -1;
      695:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    15290:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
     6950:  215:    card = floor(Random() * state->deckCount[player]);
     6950:  216:    newDeck[newDeckPos] = state->deck[player][card];
     6950:  217:    newDeckPos++;
    51904:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 73%
branch  1 taken 27%
    19002:  219:      state->deck[player][i] = state->deck[player][i+1];
    19002:  220:    }
     6950:  221:    state->deckCount[player]--;
        -:  222:  }
    15290:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
     6950:  224:    state->deck[player][i] = newDeck[i];
     6950:  225:    state->deckCount[player]++;
     6950:  226:  }
        -:  227:
      695:  228:  return 0;
      703:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 6 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
        6:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 4 returned 100% blocks executed 92%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        4:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 50%
branch  1 taken 50%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        2:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
       50:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 4%
branch  1 taken 96%
        -:  405:	{
        2:  406:	  j++;
        2:  407:	}
       50:  408:    }
        2:  409:  if ( j >= 3)
branch  0 taken 0%
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        4:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 1184 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     1184:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        8:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
        4:  538:    state->deckCount[player] = state->discardCount[player];
        4:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        4:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        4:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        4:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        4:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        4:  559:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
        4:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
     1180:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     1180:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1180:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1180:  576:    state->deckCount[player]--;
     1180:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     1180:  580:  return 0;
     1184:  581:}
        -:  582:
function getCost called 30 returned 100% blocks executed 41%
        -:  583:int getCost(int cardNumber)
        -:  584:{
       30:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 10%
branch  8 taken 10%
branch  9 taken 10%
branch 10 taken 10%
branch 11 taken 10%
branch 12 taken 10%
branch 13 taken 10%
branch 14 taken 10%
branch 15 taken 10%
branch 16 taken 10%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
        3:  602:      return 6;
        -:  603:    case council_room:
        3:  604:      return 5;
        -:  605:    case feast:
        3:  606:      return 4;
        -:  607:    case gardens:
        3:  608:      return 4;
        -:  609:    case mine:
        3:  610:      return 5;
        -:  611:    case remodel:
        3:  612:      return 4;
        -:  613:    case smithy:
        3:  614:      return 4;
        -:  615:    case village:
        3:  616:      return 3;
        -:  617:    case baron:
        3:  618:      return 4;
        -:  619:    case great_hall:
        3:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
       30:  644:}
        -:  645:
function smithy_action called 1 returned 100% blocks executed 100%
        -:  646:int smithy_action(int handPos, struct gameState *state, int currentPlayer){
        -:  647:
        -:  648:	int i;
       10:  649:	for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  650:	{
        4:  651:		drawCard(currentPlayer, state);
        4:  652:	}
        -:  653:	
        -:  654:	//discard card from hand
        1:  655:	discardCard(handPos, currentPlayer, state, 1);
        1:  656:	return 0;
        -:  657:}
        -:  658:
function adventurer_action called 1 returned 100% blocks executed 100%
        -:  659:int adventurer_action(int currentPlayer, struct gameState *state){
        1:  660:	int z = 0;
        1:  661:	int drawntreasure = 0;
        -:  662:	int cardDrawn;
        -:  663:	int temphand[MAX_HAND];
       20:  664:	while(drawntreasure<=2){
branch  0 taken 90%
branch  1 taken 10%
        9:  665:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 44%
branch  1 taken 56%
        4:  666:	  shuffle(currentPlayer, state);
        4:  667:		}
        9:  668:		drawCard(currentPlayer, state);
        9:  669:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];
       21:  670:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 67%
branch  1 taken 33%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        3:  671:	  drawntreasure++;
        -:  672:		else{
        6:  673:	  temphand[z]=cardDrawn;
        6:  674:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        6:  675:	  z++;
        -:  676:		}
        -:  677:	}
       14:  678:	while(z-1>=0){
branch  0 taken 86%
branch  1 taken 14%
        6:  679:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        6:  680:		z=z-1;
        -:  681:	}
        1:  682:	return 0;
        -:  683:}
        -:  684:
function council_room_action called 1 returned 100% blocks executed 100%
        -:  685:int council_room_action(int handPos, int currentPlayer, struct gameState *state){
        -:  686:	//+4 Cards
        -:  687:	int i;
       10:  688:	for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  689:	{
        4:  690:		drawCard(currentPlayer, state);
        4:  691:	}
        -:  692:	
        -:  693:	//+1 Buy
        1:  694:	state->numBuys++;
        -:  695:	
        -:  696:	//Each other player draws a card
        6:  697:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  698:	{
        2:  699:		if ( i != currentPlayer )
branch  0 taken 50%
branch  1 taken 50%
        -:  700:		{
        1:  701:			drawCard(i, state);
        1:  702:		}
        2:  703:	}
        -:  704:	
        -:  705:	
        1:  706:	return 0;
        -:  707:}
        -:  708:
function village_action called 1 returned 100% blocks executed 100%
        -:  709:int village_action(int handPos, int currentPlayer, struct gameState *state){
        -:  710:	//+1 Card
        1:  711:	drawCard(currentPlayer, state);
        -:  712:	
        -:  713:	//+2 Actions
        1:  714:	state->numActions = state->numBuys + 2;
        -:  715:	
        -:  716:	//discard played card from hand
        1:  717:	discardCard(handPos, currentPlayer, state, 0);
        1:  718:	return 0;
        -:  719:}
        -:  720:
function great_hall_action called 0 returned 0% blocks executed 0%
        -:  721:int great_hall_action(int handPos, int currentPlayer, struct gameState *state){
        -:  722:	//+1 Card
    #####:  723:	drawCard(currentPlayer, state);
        -:  724:	
        -:  725:	//+1 Actions
    #####:  726:	state->numActions++;
        -:  727:	
        -:  728:	//discard card from hand
    #####:  729:	discardCard(handPos, currentPlayer, state, 0);
    #####:  730:	return 0;
        -:  731:}
        -:  732:
function cardEffect called 6 returned 100% blocks executed 9%
        -:  733:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  734:{
        -:  735:  int i;
        -:  736:  int j;
        -:  737:  int k;
        -:  738:  int x;
        -:  739:  int index;
        6:  740:  int currentPlayer = whoseTurn(state);
        6:  741:  int nextPlayer = currentPlayer + 1;
        -:  742:
        6:  743:  int tributeRevealedCards[2] = {-1, -1};
        -:  744:  int temphand[MAX_HAND];// moved above the if statement
        6:  745:  int drawntreasure=0;
        -:  746:  int cardDrawn;
        6:  747:  int z = 0;// this is the counter for the temp hand
        6:  748:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  749:    nextPlayer = 0;
    #####:  750:  }
        -:  751:	
        -:  752:	
        -:  753:	//refactor
        -:  754:	
        6:  755:  if (card == smithy){
branch  0 taken 17%
branch  1 taken 83%
        1:  756:		return smithy_action(handPos, state, currentPlayer);
        -:  757:	}
        5:  758:	else if(card == adventurer){
branch  0 taken 20%
branch  1 taken 80%
        1:  759:		return adventurer_action(currentPlayer, state);
        -:  760:	}
        4:  761:	else if(card == council_room){
branch  0 taken 25%
branch  1 taken 75%
        1:  762:		return council_room_action(handPos, currentPlayer, state);
        -:  763:	}
        3:  764:	else if(card == village){
branch  0 taken 33%
branch  1 taken 67%
        1:  765:		return village_action(handPos, currentPlayer, state);
        -:  766:	}
        2:  767:	else if(card == great_hall){
branch  0 taken 0%
branch  1 taken 100%
    #####:  768:		return great_hall_action(handPos, currentPlayer, state);
        -:  769:	}
        -:  770:	
        -:  771:  //uses switch to select card and perform actions
        2:  772:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 100%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
        -:  773:    {
        -:  774:    /*case adventurer:
        -:  775:      while(drawntreasure<2){
        -:  776:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  777:	  shuffle(currentPlayer, state);
        -:  778:	}
        -:  779:	drawCard(currentPlayer, state);
        -:  780:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  781:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  782:	  drawntreasure++;
        -:  783:	else{
        -:  784:	  temphand[z]=cardDrawn;
        -:  785:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  786:	  z++;
        -:  787:	}
        -:  788:      }
        -:  789:      while(z-1>=0){
        -:  790:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  791:	z=z-1;
        -:  792:      }
        -:  793:      return 0;
        -:  794:			
        -:  795:    case council_room:
        -:  796:      //+4 Cards
        -:  797:      for (i = 0; i < 4; i++)
        -:  798:	{
        -:  799:	  drawCard(currentPlayer, state);
        -:  800:	}
        -:  801:			
        -:  802:      //+1 Buy
        -:  803:      state->numBuys++;
        -:  804:			
        -:  805:      //Each other player draws a card
        -:  806:      for (i = 0; i < state->numPlayers; i++)
        -:  807:	{
        -:  808:	  if ( i != currentPlayer )
        -:  809:	    {
        -:  810:	      drawCard(i, state);
        -:  811:	    }
        -:  812:	}
        -:  813:			
        -:  814:      //put played card in played card pile
        -:  815:      discardCard(handPos, currentPlayer, state, 0);
        -:  816:			
        -:  817:      return 0;*/
        -:  818:			
        -:  819:    case feast:
        -:  820:      //gain card with cost up to 5
        -:  821:      //Backup hand
    #####:  822:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  823:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  824:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  825:      }
        -:  826:      //Backup hand
        -:  827:
        -:  828:      //Update Coins for Buy
    #####:  829:      updateCoins(currentPlayer, state, 5);
    #####:  830:      x = 1;//Condition to loop on
    #####:  831:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  832:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  833:	  if (DEBUG)
        -:  834:	    printf("None of that card left, sorry!\n");
        -:  835:
        -:  836:	  if (DEBUG){
        -:  837:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  838:	  }
    #####:  839:	}
    #####:  840:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  841:	  printf("That card is too expensive!\n");
        -:  842:
        -:  843:	  if (DEBUG){
        -:  844:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  845:	  }
    #####:  846:	}
        -:  847:	else{
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  851:	  }
        -:  852:
    #####:  853:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  854:	  x = 0;//No more buying cards
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  858:	  }
        -:  859:
        -:  860:	}
        -:  861:      }     
        -:  862:
        -:  863:      //Reset Hand
    #####:  864:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  865:	state->hand[currentPlayer][i] = temphand[i];
    #####:  866:	temphand[i] = -1;
    #####:  867:      }
        -:  868:      //Reset Hand
        -:  869:      			
    #####:  870:      return 0;
        -:  871:			
        -:  872:    case gardens:
    #####:  873:      return -1;
        -:  874:			
        -:  875:    case mine:
    #####:  876:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  877:
    #####:  878:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  879:	{
    #####:  880:	  return -1;
        -:  881:	}
        -:  882:		
    #####:  883:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  884:	{
    #####:  885:	  return -1;
        -:  886:	}
        -:  887:
    #####:  888:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  889:	{
    #####:  890:	  return -1;
        -:  891:	}
        -:  892:
    #####:  893:      gainCard(choice2, state, 2, currentPlayer);
        -:  894:
        -:  895:      //discard card from hand
    #####:  896:      discardCard(handPos, currentPlayer, state, 0);
        -:  897:
        -:  898:      //discard trashed card
    #####:  899:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  900:	{
    #####:  901:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  902:	    {
    #####:  903:	      discardCard(i, currentPlayer, state, 0);			
    #####:  904:	      break;
        -:  905:	    }
    #####:  906:	}
        -:  907:			
    #####:  908:      return 0;
        -:  909:			
        -:  910:    case remodel:
    #####:  911:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  912:
    #####:  913:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  914:	{
    #####:  915:	  return -1;
        -:  916:	}
        -:  917:
    #####:  918:      gainCard(choice2, state, 0, currentPlayer);
        -:  919:
        -:  920:      //discard card from hand
    #####:  921:      discardCard(handPos, currentPlayer, state, 0);
        -:  922:
        -:  923:      //discard trashed card
    #####:  924:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  925:	{
    #####:  926:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  927:	    {
    #####:  928:	      discardCard(i, currentPlayer, state, 0);			
    #####:  929:	      break;
        -:  930:	    }
    #####:  931:	}
        -:  932:
        -:  933:
    #####:  934:      return 0;
        -:  935:		
        -:  936:    /*case smithy:
        -:  937:      //+3 Cards
        -:  938:      for (i = 0; i < 3; i++)
        -:  939:	{
        -:  940:	  drawCard(currentPlayer, state);
        -:  941:	}
        -:  942:			
        -:  943:      //discard card from hand
        -:  944:      discardCard(handPos, currentPlayer, state, 0);
        -:  945:      return 0;*/
        -:  946:		
        -:  947:    /*case village:
        -:  948:      //+1 Card
        -:  949:      drawCard(currentPlayer, state);
        -:  950:			
        -:  951:      //+2 Actions
        -:  952:      state->numActions = state->numActions + 2;
        -:  953:			
        -:  954:      //discard played card from hand
        -:  955:      discardCard(handPos, currentPlayer, state, 0);
        -:  956:      return 0;*/
        -:  957:		
        -:  958:    case baron:
    #####:  959:      state->numBuys++;//Increase buys by 1!
    #####:  960:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  961:	int p = 0;//Iterator for hand!
    #####:  962:	int card_not_discarded = 1;//Flag for discard set!
    #####:  963:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  964:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  965:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  966:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  967:	    state->discardCount[currentPlayer]++;
    #####:  968:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  969:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  970:	    }
    #####:  971:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  972:	    state->handCount[currentPlayer]--;
    #####:  973:	    card_not_discarded = 0;//Exit the loop
    #####:  974:	  }
    #####:  975:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  976:	    if(DEBUG) {
        -:  977:	      printf("No estate cards in your hand, invalid choice\n");
        -:  978:	      printf("Must gain an estate if there are any\n");
        -:  979:	    }
    #####:  980:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  981:	      gainCard(estate, state, 0, currentPlayer);
    #####:  982:	      state->supplyCount[estate]--;//Decrement estates
    #####:  983:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  984:		isGameOver(state);
    #####:  985:	      }
    #####:  986:	    }
    #####:  987:	    card_not_discarded = 0;//Exit the loop
    #####:  988:	  }
        -:  989:			    
        -:  990:	  else{
    #####:  991:	    p++;//Next card
        -:  992:	  }
        -:  993:	}
    #####:  994:      }
        -:  995:			    
        -:  996:      else{
    #####:  997:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  998:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  999:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1000:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####: 1001:	    isGameOver(state);
    #####: 1002:	  }
    #####: 1003:	}
        -: 1004:      }
        -: 1005:	    
        -: 1006:      
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    /*case great_hall:
        -: 1010:      //+1 Card
        -: 1011:      drawCard(currentPlayer, state);
        -: 1012:			
        -: 1013:      //+1 Actions
        -: 1014:      state->numActions++;
        -: 1015:			
        -: 1016:      //discard card from hand
        -: 1017:      discardCard(handPos, currentPlayer, state, 0);
        -: 1018:      return 0;*/
        -: 1019:		
        -: 1020:    case minion:
        -: 1021:      //+1 action
    #####: 1022:      state->numActions++;
        -: 1023:			
        -: 1024:      //discard card from hand
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
        -: 1026:			
    #####: 1027:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1028:	{
    #####: 1029:	  state->coins = state->coins + 2;
    #####: 1030:	}
        -: 1031:			
    #####: 1032:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1033:	{
        -: 1034:	  //discard hand
    #####: 1035:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -: 1036:	    {
    #####: 1037:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1038:	    }
        -: 1039:				
        -: 1040:	  //draw 4
    #####: 1041:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1042:	    {
    #####: 1043:	      drawCard(currentPlayer, state);
    #####: 1044:	    }
        -: 1045:				
        -: 1046:	  //other players discard hand and redraw if hand size > 4
    #####: 1047:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1048:	    {
    #####: 1049:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1050:		{
    #####: 1051:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1052:		    {
        -: 1053:		      //discard hand
    #####: 1054:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1055:			{
    #####: 1056:			  discardCard(handPos, i, state, 0);
        -: 1057:			}
        -: 1058:							
        -: 1059:		      //draw 4
    #####: 1060:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1061:			{
    #####: 1062:			  drawCard(i, state);
    #####: 1063:			}
    #####: 1064:		    }
    #####: 1065:		}
    #####: 1066:	    }
        -: 1067:				
    #####: 1068:	}
    #####: 1069:      return 0;
        -: 1070:		
        -: 1071:    case steward:
        2: 1072:      if (choice1 == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1073:	{
        -: 1074:	  //+2 cards
    #####: 1075:	  drawCard(currentPlayer, state);
    #####: 1076:	  drawCard(currentPlayer, state);
    #####: 1077:	}
        2: 1078:      else if (choice1 == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1079:	{
        -: 1080:	  //+2 coins
    #####: 1081:	  state->coins = state->coins + 2;
    #####: 1082:	}
        -: 1083:      else
        -: 1084:	{
        -: 1085:	  //trash 2 cards in hand
        2: 1086:	  discardCard(choice2, currentPlayer, state, 1);
        2: 1087:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1088:	}
        -: 1089:			
        -: 1090:      //discard card from hand
        2: 1091:      discardCard(handPos, currentPlayer, state, 0);
        2: 1092:      return 0;
        -: 1093:		
        -: 1094:    case tribute:
    #####: 1095:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1096:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1097:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1098:	  state->deckCount[nextPlayer]--;
    #####: 1099:	}
    #####: 1100:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1101:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1102:	  state->discardCount[nextPlayer]--;
    #####: 1103:	}
        -: 1104:	else{
        -: 1105:	  //No Card to Reveal
        -: 1106:	  if (DEBUG){
        -: 1107:	    printf("No cards to reveal\n");
        -: 1108:	  }
        -: 1109:	}
    #####: 1110:      }
        -: 1111:	    
        -: 1112:      else{
    #####: 1113:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1114:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1115:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1116:	    state->deckCount[nextPlayer]++;
    #####: 1117:	    state->discard[nextPlayer][i] = -1;
    #####: 1118:	    state->discardCount[nextPlayer]--;
    #####: 1119:	  }
        -: 1120:			    
    #####: 1121:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1122:	} 
    #####: 1123:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1124:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1125:	state->deckCount[nextPlayer]--;
    #####: 1126:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1127:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1128:	state->deckCount[nextPlayer]--;
        -: 1129:      }    
        -: 1130:		       
    #####: 1131:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1132:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1133:	state->playedCardCount++;
    #####: 1134:	tributeRevealedCards[1] = -1;
    #####: 1135:      }
        -: 1136:
    #####: 1137:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1138:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1139:	  state->coins += 2;
    #####: 1140:	}
        -: 1141:		    
    #####: 1142:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1143:	  drawCard(currentPlayer, state);
    #####: 1144:	  drawCard(currentPlayer, state);
    #####: 1145:	}
        -: 1146:	else{//Action Card
    #####: 1147:	  state->numActions = state->numActions + 2;
        -: 1148:	}
    #####: 1149:      }
        -: 1150:	    
    #####: 1151:      return 0;
        -: 1152:		
        -: 1153:    case ambassador:
    #####: 1154:      j = 0;		//used to check if player has enough cards to discard
        -: 1155:
    #####: 1156:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1157:	{
    #####: 1158:	  return -1;				
        -: 1159:	}
        -: 1160:
    #####: 1161:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1162:	{
    #####: 1163:	  return -1;
        -: 1164:	}
        -: 1165:
    #####: 1166:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1167:	{
    #####: 1168:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1169:	    {
    #####: 1170:	      j++;
    #####: 1171:	    }
    #####: 1172:	}
    #####: 1173:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1174:	{
    #####: 1175:	  return -1;				
        -: 1176:	}
        -: 1177:
        -: 1178:      if (DEBUG) 
        -: 1179:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1180:
        -: 1181:      //increase supply count for choosen card by amount being discarded
    #####: 1182:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1183:			
        -: 1184:      //each other player gains a copy of revealed card
    #####: 1185:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1186:	{
    #####: 1187:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1188:	    {
    #####: 1189:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1190:	    }
    #####: 1191:	}
        -: 1192:
        -: 1193:      //discard played card from hand
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1195:
        -: 1196:      //trash copies of cards returned to supply
    #####: 1197:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1198:	{
    #####: 1199:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1200:	    {
    #####: 1201:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1202:		{
    #####: 1203:		  discardCard(i, currentPlayer, state, 1);
    #####: 1204:		  break;
        -: 1205:		}
    #####: 1206:	    }
    #####: 1207:	}			
        -: 1208:
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case cutpurse:
        -: 1212:
    #####: 1213:      updateCoins(currentPlayer, state, 2);
    #####: 1214:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1215:	{
    #####: 1216:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1217:	    {
    #####: 1218:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1219:		{
    #####: 1220:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1221:		    {
    #####: 1222:		      discardCard(j, i, state, 0);
    #####: 1223:		      break;
        -: 1224:		    }
    #####: 1225:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1226:		    {
    #####: 1227:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1228:			{
        -: 1229:			  if (DEBUG)
        -: 1230:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1231:			}	
    #####: 1232:		      break;
        -: 1233:		    }		
    #####: 1234:		}
        -: 1235:					
    #####: 1236:	    }
        -: 1237:				
    #####: 1238:	}				
        -: 1239:
        -: 1240:      //discard played card from hand
    #####: 1241:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1242:
    #####: 1243:      return 0;
        -: 1244:
        -: 1245:		
        -: 1246:    case embargo: 
        -: 1247:      //+2 Coins
    #####: 1248:      state->coins = state->coins + 2;
        -: 1249:			
        -: 1250:      //see if selected pile is in play
    #####: 1251:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1252:	{
    #####: 1253:	  return -1;
        -: 1254:	}
        -: 1255:			
        -: 1256:      //add embargo token to selected supply pile
    #####: 1257:      state->embargoTokens[choice1]++;
        -: 1258:			
        -: 1259:      //trash card
    #####: 1260:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1261:      return 0;
        -: 1262:		
        -: 1263:    case outpost:
        -: 1264:      //set outpost flag
    #####: 1265:      state->outpostPlayed++;
        -: 1266:			
        -: 1267:      //discard card
    #####: 1268:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1269:      return 0;
        -: 1270:		
        -: 1271:    case salvager:
        -: 1272:      //+1 buy
    #####: 1273:      state->numBuys++;
        -: 1274:			
    #####: 1275:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1276:	{
        -: 1277:	  //gain coins equal to trashed card
    #####: 1278:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1279:	  //trash card
    #####: 1280:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1281:	}
        -: 1282:			
        -: 1283:      //discard card
    #####: 1284:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1285:      return 0;
        -: 1286:		
        -: 1287:    case sea_hag:
    #####: 1288:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1289:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1290:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1291:	  state->discardCount[i]++;
    #####: 1292:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1293:	}
    #####: 1294:      }
    #####: 1295:      return 0;
        -: 1296:		
        -: 1297:    case treasure_map:
        -: 1298:      //search hand for another treasure_map
    #####: 1299:      index = -1;
    #####: 1300:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1301:	{
    #####: 1302:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1303:	    {
    #####: 1304:	      index = i;
    #####: 1305:	      break;
        -: 1306:	    }
    #####: 1307:	}
    #####: 1308:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1309:	{
        -: 1310:	  //trash both treasure cards
    #####: 1311:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1312:	  discardCard(index, currentPlayer, state, 1);
        -: 1313:
        -: 1314:	  //gain 4 Gold cards
    #####: 1315:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1316:	    {
    #####: 1317:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1318:	    }
        -: 1319:				
        -: 1320:	  //return success
    #####: 1321:	  return 1;
        -: 1322:	}
        -: 1323:			
        -: 1324:      //no second treasure_map found in hand
    #####: 1325:      return -1;
        -: 1326:    }
        -: 1327:	
    #####: 1328:  return -1;
        6: 1329:}
        -: 1330:
function discardCard called 98 returned 100% blocks executed 90%
        -: 1331:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1332:{
        -: 1333:	
        -: 1334:  //if card is not trashed, added to Played pile 
       98: 1335:  if (trashFlag < 1)
branch  0 taken 49%
branch  1 taken 51%
        -: 1336:    {
        -: 1337:      //add card to played pile
       48: 1338:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       48: 1339:      state->playedCardCount++;
       48: 1340:    }
        -: 1341:	
        -: 1342:  //set played card to -1
       98: 1343:  state->hand[currentPlayer][handPos] = -1;
        -: 1344:	
        -: 1345:  //remove card from player's hand
       98: 1346:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 31%
branch  1 taken 69%
        -: 1347:    {
        -: 1348:      //reduce number of cards in hand
       30: 1349:      state->handCount[currentPlayer]--;
       30: 1350:    }
       68: 1351:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1352:    {
        -: 1353:      //reduce number of cards in hand
    #####: 1354:      state->handCount[currentPlayer]--;
    #####: 1355:    }
        -: 1356:  else 	
        -: 1357:    {
        -: 1358:      //replace discarded card with last card in hand
       68: 1359:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1360:      //set last card to -1
       68: 1361:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1362:      //reduce number of cards in hand
       68: 1363:      state->handCount[currentPlayer]--;
        -: 1364:    }
        -: 1365:	
       98: 1366:  return 0;
        -: 1367:}
        -: 1368:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1369:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1370:{
        -: 1371:  //Note: supplyPos is enum of choosen card
        -: 1372:	
        -: 1373:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1374:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1375:    {
    #####: 1376:      return -1;
        -: 1377:    }
        -: 1378:	
        -: 1379:  //added card for [whoseTurn] current player:
        -: 1380:  // toFlag = 0 : add to discard
        -: 1381:  // toFlag = 1 : add to deck
        -: 1382:  // toFlag = 2 : add to hand
        -: 1383:
    #####: 1384:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1385:    {
    #####: 1386:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1387:      state->deckCount[player]++;
    #####: 1388:    }
    #####: 1389:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1390:    {
    #####: 1391:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1392:      state->handCount[player]++;
    #####: 1393:    }
        -: 1394:  else
        -: 1395:    {
    #####: 1396:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1397:      state->discardCount[player]++;
        -: 1398:    }
        -: 1399:	
        -: 1400:  //decrease number in supply pile
    #####: 1401:  state->supplyCount[supplyPos]--;
        -: 1402:	 
    #####: 1403:  return 0;
    #####: 1404:}
        -: 1405:
function updateCoins called 893 returned 100% blocks executed 100%
        -: 1406:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1407:{
        -: 1408:  int i;
        -: 1409:	
        -: 1410:  //reset coin count
      893: 1411:  state->coins = 0;
        -: 1412:
        -: 1413:  //add coins for each Treasure card in player's hand
     8076: 1414:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 78%
branch  1 taken 22%
        -: 1415:    {
     3145: 1416:      if (state->hand[player][i] == copper)
branch  0 taken 45%
branch  1 taken 55%
        -: 1417:	{
     1427: 1418:	  state->coins += 1;
     1427: 1419:	}
     1718: 1420:      else if (state->hand[player][i] == silver)
branch  0 taken 29%
branch  1 taken 71%
        -: 1421:	{
      495: 1422:	  state->coins += 2;
      495: 1423:	}
     1223: 1424:      else if (state->hand[player][i] == gold)
branch  0 taken 40%
branch  1 taken 60%
        -: 1425:	{
      495: 1426:	  state->coins += 3;
      495: 1427:	}	
     3145: 1428:    }	
        -: 1429:
        -: 1430:  //add bonus
      893: 1431:  state->coins += bonus;
        -: 1432:
      893: 1433:  return 0;
        -: 1434:}
        -: 1435:
        -: 1436:
        -: 1437://end of dominion.c
        -: 1438:
